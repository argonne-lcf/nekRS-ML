"""
Check GNN input files generated by nekRS againt a reference
"""
import os
import argparse
import numpy as np

def exists(fname):
    return os.path.exists(fname)

def main():
    parser = argparse.ArgumentParser(description='Process command line arguments.')
    parser.add_argument('--REF', type=str, required=True, help='Specify the reference folder path.')
    parser.add_argument('--PATH', type=str, required=True, help='Specify the gnn_outputs folder path.')
    args = parser.parse_args()

    for root, dirs, files in os.walk(args.REF):
        for file_name in files:
            print(f'Checking {file_name} ...', flush=True)
            ext = file_name.split('.')[-1]
            if ext == "bin":
                ref_data = np.fromfile(args.REF+"/"+file_name)
                new_data_file = args.PATH+"/"+file_name
                assert exists(new_data_file), f"File {new_data_file} does not exist"
                new_data = np.fromfile(new_data_file)
                assert np.allclose(ref_data,new_data), f"File {new_data_file} does not match reference data"
            elif ext == "npy":
                ref_data = np.load(args.REF+"/"+file_name)
                new_data_file = args.PATH+"/"+file_name
                assert exists(new_data_file), f"File {new_data_file} does not exist"
                new_data = np.load(new_data_file)
                assert np.allclose(ref_data,new_data), f"File {new_data_file} does not match reference data"
            else:
                ref_data = np.loadtxt(args.REF+"/"+file_name)
                new_data_file = args.PATH+"/"+file_name
                assert exists(new_data_file), f"File {new_data_file} does not exist"
                new_data = np.loadtxt(new_data_file)
                assert np.allclose(ref_data,new_data), f"File {new_data_file} does not match reference data"

if __name__ == '__main__':
    main()
    print("SUCCESS! ALL FILES PASSED THE CHECK! \n\n")


