#!/bin/bash

: ${SYSTEM:="aurora:compute"}
: ${PREFIX:="`pwd`/test_data"}
: ${QUEUE:="prod"}
: ${PROJECT:="Performance"}
: ${FS:="home"}
: ${REUSE:="1"}
: ${TAG:="all"}

# Parse command line args
# =======================

print_help() {
  echo "Usage: $(basename "$0") [options]"
  echo ""
  echo "Options:"
  echo "  --system,      -s   <SYSTEM>         Set the system name (Default: $SYSTEM)"
  echo "  --prefix,      -p   <PREFIX>         Set the installation prefix (Default: $PREFIX)"
  echo "  --queue,       -q   <QUEUE>          Set the job queue (Default: $QUEUE)"
  echo "  --project,     -prj <PROJECT>        Set the project name (Default: $PROJECT)"
  echo "  --filesystem,  -f   <FS>             Set the filesystem (Default: $FS)"
  echo "  --tag,         -t   <TAG>            Run the tests with tag TAG"
  echo "  --build,       -b                    Build the dependencies from scratch (do not reuse)"
  echo "  --clean,       -c                    Clean the temporary files generated by Python etc."
  echo "  --help,        -h                    Show this help message and exit"
  echo ""
  echo "Examples:"
  echo "  To run all the tests:"
  echo "    ./$(basename "$0") -b"
  echo "  or"
  echo "    ./$(basename "$0") -b -t all"
  echo "  To run the tests with tag \"online\":"
  echo "    ./$(basename "$0") -t online -b"
  echo "  Please note that the \"-b (--build)\" parameter is only required in the first run of each tag."
}

clean() {
  rm -rf __pycache__
}

while [ $# -gt 0 ]; do
  flag="$1"
  case $flag in
    --system| -s)
      SYSTEM="$2"
      shift; shift
      ;;
    --prefix| -p)
      PREFIX="$2"
      shift; shift
      ;;
    --queue| -q)
      QUEUE="$2"
      shift; shift
      ;;
    --project| -prj)
      PROJECT="$2"
      shift; shift
      ;;
    --filesystem| -f)
      FS="$2"
      shift; shift
      ;;
    --tag| -t)
      TAG="$2"
      shift; shift
      ;;
    --build| -b)
      REUSE=0
      shift
      ;;
    --help| -h)
      print_help
      exit 0
      ;;
    --clean| -c)
      clean
      ;;
    *)
      print_help
      exit 1
  esac
done

# Environment variables
# =====================
export PYTHONPATH=`pwd`:${PYTHONPATH}
export PATH=$HOME/.local/bin/:$PATH

# ReFrame command guide
# =====================
# --config-file: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-C
# --system: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-system
# --exec-policy: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-exec-policy
# --keep-stage-files: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-keep-stage-files
# --restore-session: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-restore-session
# --timestamp: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-timestamp
# --prefix: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-prefix
# --report-file: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-report-file
# --checkpath: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-c
# --tag: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-t
# --run: https://reframe-hpc.readthedocs.io/en/stable/manpage.html#cmdoption-r
CMD="uv run reframe --save-log-files --config-file sites.py --system ${SYSTEM} --exec-policy=async"
if [ "${REUSE}" -eq 1 ]; then
  CMD="${CMD} --restore-session"
fi
CMD="${CMD} --keep-stage-files"
CMD="${CMD} -S queue=${QUEUE} -S project=${PROJECT} -S filesystems=${FS}"
CMD="${CMD} --timestamp --prefix=${PREFIX}"
CMD="${CMD} --report-file ${PREFIX}/reports/report_{sessionid}.json"
CMD="${CMD} --checkpath examples.py --tag ${TAG} --run"
${CMD}
